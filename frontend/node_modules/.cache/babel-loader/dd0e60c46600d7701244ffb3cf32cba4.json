{"ast":null,"code":"var _jsxFileName = \"B:\\\\ShopStore\\\\frontend\\\\src\\\\Context\\\\AuthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState(null); // const [csrftoken, setCsrfToken] = useState(getCookie('csrftoken'))\n\n  function setUser(user) {\n    setCurrentUser(user);\n  }\n\n  function getCookie(name) {\n    let cookieValue = null;\n    console.log(document.cookie);\n\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n\n    return cookieValue;\n  }\n\n  const csrftoken = getCookie('csrftoken');\n  const value = {\n    user: currentUser,\n    setUser: setUser,\n    csrftoken: csrftoken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AuthProvider, \"D3+eUn/eYbOcEwoCOjOk5Grmif4=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["B:/ShopStore/frontend/src/Context/AuthProvider.jsx"],"names":["React","useState","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","setUser","user","getCookie","name","cookieValue","console","log","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","csrftoken","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AACA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,EAApB;AAEP,OAAO,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAiC;AAAA;;AACpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C,CADoC,CAEpC;;AAEA,WAASO,OAAT,CAAiBC,IAAjB,EAAsB;AAClBF,IAAAA,cAAc,CAACE,IAAD,CAAd;AACH;;AAED,WAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,QAAIC,WAAW,GAAG,IAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACC,MAArB;;AACA,QAAID,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,YAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,cAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADqC,CAErC;;AACA,YAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBX,IAAI,CAACS,MAAL,GAAc,CAAlC,MAA0CT,IAAI,GAAG,GAArD,EAA2D;AACvDC,UAAAA,WAAW,GAAGW,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBX,IAAI,CAACS,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,WAAOR,WAAP;AACH;;AACD,QAAMY,SAAS,GAAGd,SAAS,CAAC,WAAD,CAA3B;AAEA,QAAMe,KAAK,GAAG;AACVhB,IAAAA,IAAI,EAACH,WADK;AAEVE,IAAAA,OAAO,EAACA,OAFE;AAGVgB,IAAAA,SAAS,EAACA;AAHA,GAAd;AAKA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,KAA7B;AAAA,cAAqCpB;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAhCeD,Y;;KAAAA,Y","sourcesContent":["import React, {useState} from 'react'\r\nexport const AuthContext = React.createContext()\r\n\r\nexport function AuthProvider({children}){\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    // const [csrftoken, setCsrfToken] = useState(getCookie('csrftoken'))\r\n\r\n    function setUser(user){\r\n        setCurrentUser(user);\r\n    }\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        console.log(document.cookie);\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    const value = {\r\n        user:currentUser,\r\n        setUser:setUser,\r\n        csrftoken:csrftoken\r\n    }\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}"]},"metadata":{},"sourceType":"module"}